// Code generated by mockery v2.25.0. DO NOT EDIT.

package mocks

import (
	entities "homework10/internal/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AdRepository is an autogenerated mock type for the AdRepository type
type AdRepository struct {
	mock.Mock
}

// AddAd provides a mock function with given fields: ad
func (_m *AdRepository) AddAd(ad entities.Ad) (int64, error) {
	ret := _m.Called(ad)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Ad) (int64, error)); ok {
		return rf(ad)
	}
	if rf, ok := ret.Get(0).(func(entities.Ad) int64); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(entities.Ad) error); ok {
		r1 = rf(ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeAdText provides a mock function with given fields: adID, title, text, updateTime
func (_m *AdRepository) ChangeAdText(adID int64, title string, text string, updateTime time.Time) (*entities.Ad, error) {
	ret := _m.Called(adID, title, text, updateTime)

	var r0 *entities.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string, time.Time) (*entities.Ad, error)); ok {
		return rf(adID, title, text, updateTime)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string, time.Time) *entities.Ad); ok {
		r0 = rf(adID, title, text, updateTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, string, time.Time) error); ok {
		r1 = rf(adID, title, text, updateTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: adID
func (_m *AdRepository) DeleteAd(adID int64) error {
	ret := _m.Called(adID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(adID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditAdStatus provides a mock function with given fields: ad, published, updateTime
func (_m *AdRepository) EditAdStatus(ad *entities.Ad, published bool, updateTime time.Time) (*entities.Ad, error) {
	ret := _m.Called(ad, published, updateTime)

	var r0 *entities.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Ad, bool, time.Time) (*entities.Ad, error)); ok {
		return rf(ad, published, updateTime)
	}
	if rf, ok := ret.Get(0).(func(*entities.Ad, bool, time.Time) *entities.Ad); ok {
		r0 = rf(ad, published, updateTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Ad, bool, time.Time) error); ok {
		r1 = rf(ad, published, updateTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdByID provides a mock function with given fields: adID
func (_m *AdRepository) GetAdByID(adID int64) (*entities.Ad, error) {
	ret := _m.Called(adID)

	var r0 *entities.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entities.Ad, error)); ok {
		return rf(adID)
	}
	if rf, ok := ret.Get(0).(func(int64) *entities.Ad); ok {
		r0 = rf(adID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdsByFilters provides a mock function with given fields: filters
func (_m *AdRepository) GetAdsByFilters(filters []func(entities.Ad) bool) ([]entities.Ad, error) {
	ret := _m.Called(filters)

	var r0 []entities.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func([]func(entities.Ad) bool) ([]entities.Ad, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func([]func(entities.Ad) bool) []entities.Ad); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func([]func(entities.Ad) bool) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdRepository creates a new instance of AdRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdRepository(t mockConstructorTestingTNewAdRepository) *AdRepository {
	mock := &AdRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
